Maximum Product of Word Lengths

SoluGiven a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.

 

Example 1:

Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.
 

Constraints:

2 <= words.length <= 1000
1 <= words[i].length <= 1000
words[i] consists only of lowercase English letters.

Solution:
C++:

class Solution {
public:
    int maxProduct(vector<string>& words) {
          int ans = 0;
        int n = words.size();
        vector<vector<bool>> mark(n,vector<bool>(26,false));
        
        for(int i=0;i<n;i++){
            for(int j=0;j<words[i].length();j++)
                mark[i][words[i][j]-'a'] = true;
        }
        
        for(int i=0;i<n;i++){
            int n1 = words[i].length();
            for(int j=i+1;j<n;j++){
                int n2 = words[j].length();
                // check word[i] & word[j] have common words or not
                for(int k=0;k<26;k++){
                    if(mark[i][k] and mark[j][k])
                        goto h;
                }
                ans=max(ans,n1*n2);
                h:;
            }
        }
        return ans;
    }
};
